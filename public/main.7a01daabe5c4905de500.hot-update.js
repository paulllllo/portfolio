/*! For license information please see main.7a01daabe5c4905de500.hot-update.js.LICENSE.txt */
"use strict";self.webpackHotUpdateportfolio("main",{"./styles/index.scss":(e,t,s)=>{s.r(t);var i=s("./node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js")(e.id,{publicPath:"",locals:!1});e.hot.dispose(i),e.hot.accept(void 0,i)},"./app/classes/page.js":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var i=s("./node_modules/lodash/lodash.js"),l=s("./node_modules/gsap/index.js"),n=s("./node_modules/prefix/index.js"),a=s("./app/classes/AsyncLoad.js");class r{constructor({id:e,element:t,elements:s}){this.id=e,this.selector=t,this.selectorChildren={...s,lazyLoaders:"[data-src]"},this.transformPrefix=n("transform")}create(){this.element=document.querySelector(this.selector),this.elements={},this.scroll={target:0,current:0,last:0,limit:0},(0,i.each)(this.selectorChildren,((e,t)=>{e instanceof window.HTMLElement||e instanceof window.NodeList||Array.isArray(e)?this.elements[t]=e:(this.elements[t]=document.querySelectorAll(e),0===this.elements[t].length?this.elements[t]=null:1===this.elements[t].length&&(this.elements[t]=document.querySelector(e)))})),console.log("this.elements.wrapper",this.elements.wrapper),this.createAnimations(),this.createAsyncLoad()}createAnimations(){this.animatedElements=[]}createAsyncLoad(){if(this.elements.lazyLoaders?.[Symbol.iterator])this.lazyLoaders=[...this.elements.lazyLoaders].map((e=>new a.default({element:e})));else if(this.elements.lazyLoaders instanceof window.HTMLElement){this.lazyLoaders=[];const e=new a.default({element:this.elements.lazyLoaders});this.lazyLoaders.push(e)}}show(e){return new Promise((t=>{e?this.animationIn=e:(this.animationIn=l.default.timeline(),this.animationIn.fromTo(this.element,{autoAlpha:0},{autoAlpha:1})),this.animationIn.call((e=>{this.addEventListeners(),t()}))}))}hide(){return new Promise((e=>{this.destroy(),this.animationOut=l.default.timeline(),this.animationOut.to(this.element,{autoAlpha:0,onComplete:e})}))}onWheel({pixelY:e}){this.scroll.target+=e}onResize(){this.elements.wrapper&&(this.scroll.limit=this.elements.wrapper.clientHeight-window.innerHeight),(0,i.each)(this.animatedElements,(e=>{e.onResize()}))}updateScroll(){this.scroll.target=l.default.utils.clamp(0,this.scroll.limit,this.scroll.target),this.scroll.current=l.default.utils.interpolate(this.scroll.current,this.scroll.target,.1),this.scroll.current<.1&&(this.scroll.current=0),this.elements.wrapper&&(this.elements.wrapper.style[this.transformPrefix]=`translateY(-${this.scroll.current}px)`)}addEventListeners(){}removeEventListeners(){}destroy(){this.removeEventListeners()}}}},(function(e){e.h=()=>"a4dda83aa9fae27d999b"}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,